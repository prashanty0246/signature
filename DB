export const getUserTokensByTokenId = async (tokenIds: any) => {
	ApplicationLogger({ type: 'Token getUserTokensByTokenId', message: `DB getUserTokensByTokenId :: Get User Tokens By Token IDs`});

	const denominations = await getValidDenominations()
	const tableNames = denominations.map((deno: any) => `user_token_${deno}`)

	const unionQueries = tableNames.map((tableName: any) => `
                              SELECT *
                              FROM ${tableName}
                              WHERE id IN (${tokenIds})
                        `).join('UNION');

	const query = `SELECT * FROM (${unionQueries}) AS user_tokens`;

	try {
		const result = await AppDataSource.getRepository(UserToken).query(query)
		ApplicationLogger({ type: 'Token', message: `DB getUserTokensByTokenId :: Recived Query Response for Get User Token TokensID from DB`, data: { tokenIds, result } });
		return result;
	}
	catch (error) {
		ApplicationLogger({
			type: 'Token', message: `DB getUserTokensByTokenId ::Error in getUserTokensByTokenId due to ${error.message}`,
			data: { tokenIds }, isError: true, error: error.stack})
       const { error: err, data } = await new Promise<any>((resolve) => {

	getRecursiveCallForSimpleQuery(query, [], AppDataSource.getRepository(UserToken), resolve, 0, "SELECT");
		});
		ApplicationLogger({ type: 'Token', message: `DB getUserTokensByTokenId :: DB Retry Recived Query Response for Get User Token TokensID from DB`, isError: err, data: { tokenIds, result: data } });

		if (!err) return data;

		return null;
	}
};

<ns2:ReqUpdateToken xmlns:ns2="http://npci.org/upi/schema/"><Head msgId="4578bad1049e54835a790c6e964a526dc" orgId="4578" ts="2023-12-12T18:09:00+05:30" ver=""></Head><ReqDetails type="TRANSFER"><Amount curr="INR" value="700.0"><Denominations><Denomination count="1" value="700.0"></Denomination></Denominations></Amount><Details><Detail name="senderOrgId" value="4578"></Detail><Detail name="senderOrgWalletAddress" value=""></Detail><Detail name="receiverOrgId" value="2367"></Detail><Detail name="receiverOrgWalletAddress" value="0x000000000000000000001"></Detail><Detail name="transactionId" value="RECON_TEST_1"></Detail></Details><DeviceInfo><Tag name="mobile" value=""></Tag></DeviceInfo><Tokens><Token><Detail name="issuerSign" value=""></Detail><Detail name="serialNumber" value="230000000000072"></Detail><Detail name="tokenId" value="954232e231e7a86c550c4fa871e853a0c43439ce6ace263993b409cdbef9ec2c"></Detail><Detail name="issuerAddress" value="0x43b2e29ec54b299afc87930b61f44c76ac4ec5ed"></Detail><Detail name="currency" value="MUR"></Detail><Detail name="creationTimeStamp" value="2023-11-1014:50:51.147"></Detail><Detail name="type" value="Retail"></Detail><Detail name="value" value="800.00"></Detail></Token></Tokens></ReqDetails></ns2:ReqUpdateToken>.
